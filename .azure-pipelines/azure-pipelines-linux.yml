# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: linux
  pool:
    vmImage: ubuntu-latest
  strategy:
    matrix:
      linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doublenompinompi:
        CONFIG: linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doublenompinompi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
        SHORT_CONFIG: linux_64_cuda_compilerNonecuda_comp_h69ae4d86c2
      linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doublenompiopenmpi:
        CONFIG: linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doublenompiopenmpi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
        SHORT_CONFIG: linux_64_cuda_compilerNonecuda_comp_h1958afc60d
      linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doubleyesmpinompi:
        CONFIG: linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doubleyesmpinompi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
        SHORT_CONFIG: linux_64_cuda_compilerNonecuda_comp_hfae055d3d3
      linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doubleyesmpiopenmpi:
        CONFIG: linux_64_cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12doubleyesmpiopenmpi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
        SHORT_CONFIG: linux_64_cuda_compilerNonecuda_comp_hea415398c9
      linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doublenompinompi:
        CONFIG: linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doublenompinompi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.2
        SHORT_CONFIG: linux_64_cuda_compilernvcccuda_comp_hd08733fefd
      linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doublenompiopenmpi:
        CONFIG: linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doublenompiopenmpi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.2
        SHORT_CONFIG: linux_64_cuda_compilernvcccuda_comp_hd40cf6aba9
      linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doubleyesmpinompi:
        CONFIG: linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doubleyesmpinompi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.2
        SHORT_CONFIG: linux_64_cuda_compilernvcccuda_comp_h8a0fe6f01d
      linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doubleyesmpiopenmpi:
        CONFIG: linux_64_cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10doubleyesmpiopenmpi
        UPLOAD_PACKAGES: 'True'
        DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.2
        SHORT_CONFIG: linux_64_cuda_compilernvcccuda_comp_h5000e5d167
  timeoutInMinutes: 360

  steps:
  - script: |
         rm -rf /opt/ghc
         df -h
    displayName: Manage disk space

  # configure qemu binfmt-misc running.  This allows us to run docker containers
  # embedded qemu-static
  - script: |
      docker run --rm --privileged multiarch/qemu-user-static:register --reset --credential yes
      ls /proc/sys/fs/binfmt_misc/
    condition: not(startsWith(variables['CONFIG'], 'linux_64'))
    displayName: Configure binfmt_misc

  - script: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        if [[ "${BUILD_REASON:-}" == "PullRequest" ]]; then
          export IS_PR_BUILD="True"
        else
          export IS_PR_BUILD="False"
        fi
        .scripts/run_docker_build.sh
    displayName: Run docker build
    env:
      BINSTAR_TOKEN: $(BINSTAR_TOKEN)
      FEEDSTOCK_TOKEN: $(FEEDSTOCK_TOKEN)
      STAGING_BINSTAR_TOKEN: $(STAGING_BINSTAR_TOKEN)
  - script: |
        export CI=azure
        export CI_RUN_ID=$(build.BuildNumber).$(system.JobAttempt)
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        export CONDA_BLD_DIR=build_artifacts
        export ARTIFACT_STAGING_DIR="$(Build.ArtifactStagingDirectory)"
        # Archive everything in CONDA_BLD_DIR except environments
        export BLD_ARTIFACT_PREFIX=conda_artifacts
        if [[ "$AGENT_JOBSTATUS" == "Failed" ]]; then
          # Archive the CONDA_BLD_DIR environments only when the job fails
          export ENV_ARTIFACT_PREFIX=conda_envs
        fi
        ./.scripts/create_conda_build_artifacts.sh
    displayName: Prepare conda build artifacts
    condition: succeededOrFailed()

  - task: PublishPipelineArtifact@1
    displayName: Store conda build artifacts
    condition: not(eq(variables.BLD_ARTIFACT_PATH, ''))
    inputs:
      targetPath: $(BLD_ARTIFACT_PATH)
      artifactName: $(BLD_ARTIFACT_NAME)

  - task: PublishPipelineArtifact@1
    displayName: Store conda build environment artifacts
    condition: not(eq(variables.ENV_ARTIFACT_PATH, ''))
    inputs:
      targetPath: $(ENV_ARTIFACT_PATH)
      artifactName: $(ENV_ARTIFACT_NAME)